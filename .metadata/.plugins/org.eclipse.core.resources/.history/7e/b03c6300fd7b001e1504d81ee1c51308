package main;

import java.util.*;
import projeto.*;
import view.*;
import dados.*;

public class Main {
	
	private static Dados d = new Dados();
	private static Scanner in = new Scanner(System.in);
	
	public static void main(String[] args) {
		int op = -1;
		int aux;
		d.preencherDados();
		while(op != 0) {
			System.out.print(imprimirMenu());
			op = in.nextInt();
			switch (op) {
				case 0:
					System.out.println("Obrigado por utilizar o sistema. Ate logo!");
					break;
				case 1:
					cadastrarUsuario();
					break;
				case 2:
					removerUsuario();
					break;
				case 3:
					System.out.println("Escolha um dos Usuarios a seguir para editar as informações:\n");
					listarUsuarios();
					aux = in.nextInt();
					Usuario u = lerDadosUsuario();
					editar(aux, u);
					break;
				case 4:
					listarUsuarios();
					break;
				case 5:
					cadastrarProjeto();
					break;
				case 6:
					removerProjeto();
				case 7:
					System.out.println("Escolha um dos Projetos a seguir para editar as informações:\n");
					listarProjetos();
					aux = in.nextInt();
					Projeto p = lerDadosProjeto();
					editar(aux, p);
					break;
				case 8:
					listarProjetos();
					break;
				case 9:
					cadastrarRepositorio();
					break;
				case 10:
					removerRepositorio();
				case 11:
					System.out.println("Escolha um dos Repositorios a seguir para editar as informações:\n");
					listarRepositorios();
					aux = in.nextInt();
					Repositoriorio r = lerDadosRepositorio();
					editar(aux, r);
					break;
				case 12:
					listarRepositorios();
					break;
				case 13:
					cadastrarCommit();
					break;
				case 14:
					removerCommit();
				case 15:
					System.out.println("Escolha um dos Commits a seguir para editar as informações:\n");
					listarCommits();
					aux = in.nextInt();
					Commit c = lerDadosCommit();
					editar(aux, c);
					break;
				case 16:
					listarCommits();
					break;
				case 17:
					cadastrarIssue();
					break;
				case 18:
					removerIssue();
				case 19:
					System.out.println("Escolha um dos Issues a seguir para editar as informações:\n");
					listarIssues();
					aux = in.nextInt();
					Issue iss = lerDadosIssue();
					editar(aux, iss);
					break;
				case 20:
					listarIssues();
					break;
				case 21:
					System.out.println("\nOpção Invalida!\n");
					break;
			}
		}
		in.close();
	}
	
	public static String imprimirMenu() {
		String saida = new String("Escolha uma das opçoes a seguir:\n");
		saida = saida + "00 - Sair da aplicação\n";
		saida = saida + "01 - Cadastrar novo Usuario\n";
		saida = saida + "02 - Remover usuario existente\n";
		saida = saida + "03 - Editar usuario existente\n";
		saida = saida + "04 - Listar usuarios\n";
		saida = saida + "05 - Cadastrar novo Projeto\n";
		saida = saida + "06 - Remover projeto existente\n";
		saida = saida + "07 - Editar projeto existente\n";
		saida = saida + "08 - Listar projetos\n";
		saida = saida + "09 - Cadastrar novo Repositorio\n";
		saida = saida + "10 - Remover repositorio existente\n";
		saida = saida + "11 - Editar repositorio existente\n";
		saida = saida + "12 - Listar repositorios\n";
		saida = saida + "13 - Cadastrar novo Commit\n";
		saida = saida + "14 - Remover commit existente\n";
		saida = saida + "15 - Editar commit existente\n";
		saida = saida + "16 - Listar commits\n";
		saida = saida + "17 - Cadastrar novo Issue\n";
		saida = saida + "18 - Remover projeto issue\n";
		saida = saida + "19 - Editar projeto issue\n";
		saida = saida + "20 - Listar issues\n";
		return saida;
	}
	
	public static boolean cadastrarUsuario() {
		Usuario u = lerDadosUsuario();
		if(d.getnUsuarios() < 100) {
			d.setUsuario(d.getnUsuarios(), u);
			d.setnUsuarios(d.getnUsuarios()+1);
			System.out.println("Usuario cadastrado com sucesso!\n");
			return true;
		} else {
			System.out.println("Não foi possivel cadastrar o usuario!\n");
			return false;
		}
	}
	
	public static Usuario lerDadosUsuario() {
		String nome;
		String email; 
		String senha;
		in.nextLine(); //esvazia dados do teclado
		System.out.println("Digite o nome do Usuario: ");
		nome = in.nextLine();
		System.out.println("Digite o email do Usuario:");
		email = in.nextLine();
		System.out.println("Digite a senha do Usuario");
		senha = in.nextLine();
		Usuario u = new Usuario(nome, email, senha);
		return u;	
	}
	
	public static void removerUsuario() {
		System.out.println("Escolha um dos usuarios a seguir para ser removido:\n");
		listarUsuarios();
		int i = in.nextInt();
		if(i < d.getnUsuarios() && i > 0) {
			swapListaUsuarios(i);
			d.setUsuario(d.getnUsuarios(), null);
			d.setnUsuarios(d.getnUsuarios() - 1);
			System.out.println("Usuario removido com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
		
	}
	
	public static void swapListaUsuarios(int u) {
		for(int i = u; i < d.getnUsuarios() - 1; i++) 
			d.setUsuario(i, d.getUsuario(i+1));
	}
	
	public static void editar(int i, Usuario u) {
		if(i < d.getnUsuarios() && i >= 0) {
			d.setUsuario(i, u);
			System.out.println("Dados editados com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
	}
	
	public static void listarUsuarios() {
		in.nextLine(); //esvazia dados do teclado
		for(int i = 0; i < d.getnUsuarios(); i++) 
			System.out.println(i + " -> " + d.getUsuarios()[i].toString());
		/* Descomente a linha a seguir para ver a listagem dos alunos em interface gráfica
		 * new TelaListagem(d.getNomeAlunos());
		 */
	}
	
	////////
	
	public static boolean cadastrarProjeto() {
		Projeto p = lerDadosProjeto();
		if(d.getnProjetos() < 100) {
			d.setProjeto(d.getnProjetos(), p);
			d.setnProjetos(d.getnProjetos()+1);
			System.out.println("Projeto cadastrado com sucesso!\n");
			return true;
		} else {
			System.out.println("Não foi possivel cadastrar o projeto!\n");
			return false;
		}
	}
	
	public static Projeto lerDadosProjeto() {
		String nome;
		in.nextLine(); //esvazia dados do teclado
		System.out.println("Digite o nome do Projeto: ");
		nome = in.nextLine();
		Projeto p = new Projeto(nome);
		return p;	
	}
	
	public static void removerProjeto() {
		System.out.println("Escolha um dos projetos a seguir para ser removido:\n");
		listarProjetos();
		int i = in.nextInt();
		if(i < d.getnProjetos() && i > 0) {
			swapListaProjetos(i);
			d.setProjeto(d.getnProjetos(), null);
			d.setnProjetos(d.getnProjetos() - 1);
			System.out.println("Projeto removido com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
		
	}
	
	public static void swapListaProjetos(int p) {
		for(int i = p; i < d.getnProjetos() - 1; i++) 
			d.setProjeto(i, d.getProjeto(i+1));
	}
	
	public static void editar(int i, Projeto p) {
		if(i < d.getnProjetos() && i >= 0) {
			d.setProjeto(i, p);
			System.out.println("Dados editados com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
	}
	
	public static void listarProjetos() {
		in.nextLine(); //esvazia dados do teclado
		for(int i = 0; i < d.getnProjetos(); i++) 
			System.out.println(i + " -> " + d.getProjetos()[i].toString());
		/* Descomente a linha a seguir para ver a listagem dos alunos em interface gráfica
		 * new TelaListagem(d.getNomeAlunos());
		 */
	}
	
	///////////
	
	public static boolean cadastrarRepositorio() {
		Repositorio r = lerDadosRepositorio();
		if(d.getnRepositorios() < 100) {
			d.setRepositorio(d.getnRepositorios(), r);
			d.setnRepositorios(d.getnRepositorios()+1);
			System.out.println("Repositorio cadastrado com sucesso!\n");
			return true;
		} else {
			System.out.println("Não foi possivel cadastrar o Repositorio!\n");
			return false;
		}
	}
	
	public static Repositorio lerDadosRepositorio() {
		String nome;
		in.nextLine();
		Usuario usuario;
		in.nextLine();
		String dtCriacao;
		in.nextLine(); //esvazia dados do teclado
		System.out.println("Digite o nome do Repositorio: ");
		nome = in.nextLine();
		System.out.println("Digite o nome do Usuario que criou o Repositorio: ");
		usuario = in.nextLine();//Resolver isso
		System.out.println("Digite a data de criação do Repositorio: ");
		dtCriacao = in.nextLine();
		Repositorio r = new Repositorio(nome, usuario, dtCriacao);
		return r;	
	}
	
	public static void removerRepositorio() {
		System.out.println("Escolha um dos repositorios a seguir para ser removido:\n");
		listarRepositorios();
		int i = in.nextInt();
		if(i < d.getnRepositorios() && i > 0) {
			swapListaRepositorios(i);
			d.setRepositorio(d.getnRepositorios(), null);
			d.setnRepositorios(d.getnRepositorios() - 1);
			System.out.println("Repositorio removido com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
		
	}
	
	public static void swapListaRepositorios(int r) {
		for(int i = r; i < d.getnRepositorios() - 1; i++) 
			d.setRepositorio(i, d.getRepositorio(i+1));
	}
	
	public static void editar(int i, Repositorio r) {
		if(i < d.getnRepositorios() && i >= 0) {
			d.setRepositorio(i, r);
			System.out.println("Dados editados com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
	}
	
	public static void listarRepositorios() {
		in.nextLine(); //esvazia dados do teclado
		for(int i = 0; i < d.getnRepositorios(); i++) 
			System.out.println(i + " -> " + d.getRepositorios()[i].toString());
		/* Descomente a linha a seguir para ver a listagem dos alunos em interface gráfica
		 * new TelaListagem(d.getNomeAlunos());
		 */
	}
	
	/////////////
	
	public static boolean cadastrarCommit() {
		Commit c = lerDadosCommit();
		if(d.getnCommits() < 100) {
			d.setCommit(d.getnCommits(), c);
			d.setnCommits(d.getnCommits()+1);
			System.out.println("Commit cadastrado com sucesso!\n");
			return true;
		} else {
			System.out.println("Não foi possivel cadastrar a Commit!\n");
			return false;
		}
	}
	
	public static Commit lerDadosCommit() {
		Usuario autor;
		in.nextLine();
		String dtEnvio;
		in.nextLine(); //esvazia dados do teclado
		System.out.println("Digite o autor do Commit: ");
		autor = in.nextLine();
		System.out.println("Digite a data de envio do Commit: ");
		dtEnvio = in.nextLine();
		Commit c = new Commit(autor, dtEnvio);
		return c;	
	}
	
	public static void removerCommit() {
		System.out.println("Escolha um dos commits a seguir para ser removido:\n");
		listarCommits();
		int i = in.nextInt();
		if(i < d.getnCommits() && i > 0) {
			swapListaCommits(i);
			d.setCommit(d.getnCommits(), null);
			d.setnCommits(d.getnCommits() - 1);
			System.out.println("Commit removido com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
		
	}
	
	public static void swapListaCommits(int c) {
		for(int i = c; i < d.getnCommits() - 1; i++) 
			d.setCommit(i, d.getCommit(i+1));
	}
	
	public static void editar(int i, Commit c) {
		if(i < d.getnCommits() && i >= 0) {
			d.setCommit(i, c);
			System.out.println("Dados editados com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
	}
	
	public static void listarCommits() {
		in.nextLine(); //esvazia dados do teclado
		for(int i = 0; i < d.getnCommits(); i++) 
			System.out.println(i + " -> " + d.getCommits()[i].toString());
		/* Descomente a linha a seguir para ver a listagem dos alunos em interface gráfica
		 * new TelaListagem(d.getNomeAlunos());
		 */
	}
	
	//////////
	
	public static boolean cadastrarIssue() {
		Issue i = lerDadosIssue();
		if(d.getnIssues() < 100) {
			d.setIssue(d.getnIssues(), i);
			d.setnIssues(d.getnIssues()+1);
			System.out.println("Issue cadastrado com sucesso!\n");
			return true;
		} else {
			System.out.println("Não foi possivel cadastrar a Issue!\n");
			return false;
		}
	}
	
	public static Issue lerDadosIssue() {
		String status;
		in.nextLine();
		Usuario responsavel;
		in.nextLine(); //esvazia dados do teclado
		System.out.println("Digite o status do Issue: ");
		status = in.nextLine();
		System.out.println("Digite o responsavel pelo Issue: ");
		responsavel = in.nextLine();
		Issue iss = new Issue(status, responsavel);
		return iss;	
	}
	
	public static void removerIssue() {
		System.out.println("Escolha um dos issues a seguir para ser removido:\n");
		listarIssues();
		int i = in.nextInt();
		if(i < d.getnIssues() && i > 0) {
			swapListaIssues(i);
			d.setIssue(d.getnIssues(), null);
			d.setnIssues(d.getnIssues() - 1);
			System.out.println("Issue removido com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
		
	}
	
	public static void swapListaIssues(int c) {
		for(int i = c; i < d.getnIssues() - 1; i++) 
			d.setIssue(i, d.getIssue(i+1));
	}
	
	public static void editar(int i, Issue iss) {
		if(i < d.getnIssues() && i >= 0) {
			d.setIssue(i, iss);
			System.out.println("Dados editados com sucesso");
		} else {
			System.out.println("Voce escolheu um numero invalido!");
		}
	}
	
	public static void listarIssues() {
		in.nextLine(); //esvazia dados do teclado
		for(int i = 0; i < d.getnIssues(); i++) 
			System.out.println(i + " -> " + d.getIssues()[i].toString());
		/* Descomente a linha a seguir para ver a listagem dos alunos em interface gráfica
		 * new TelaListagem(d.getNomeAlunos());
		 */
	}
	
}
